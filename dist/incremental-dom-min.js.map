{"version":3,"file":"incremental-dom-min.js","sources":["src/util.ts","src/attributes.ts","src/global.ts","src/assertions.ts","src/dom_util.ts","src/node_data.ts","src/nodes.ts","src/core.ts","src/virtual_elements.ts","src/symbols.ts","src/notifications.ts","src/context.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param map The map to check.\n * @param property The property to check.\n * @return Whether map has property.\n */\nfunction has(map: object, property: string): boolean {\n  return hasOwnProperty.call(map, property);\n}\n\n\n/**\n * Creates an map object without a prototype.\n */\n// tslint:disable-next-line:no-any\nfunction createMap(): any {\n  // tslint:disable-next-line:no-any\n  return new (Blank as any)();\n}\n\n\n/**\n * Truncates an array, removing items up until length.\n * @param arr The array to truncate.\n * @param length The new length of the array.\n */\nfunction truncateArray(arr: Array<{}|null|undefined>, length: number) {\n  while (arr.length > length) {\n    arr.pop();\n  }\n}\n\nexport {createMap, has, truncateArray,};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {AttrMutatorConfig} from './types';\nimport {symbols} from './symbols';\nimport {createMap, has} from './util';\n\n\n/**\n * Returns the namespace to use for the attribute.\n */\nfunction getNamespace(name: string): string|undefined {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n\n  return undefined;\n}\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n */\n// tslint:disable-next-line:no-any\nfunction applyAttr(el: Element, name: string, value: any) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, String(value));\n    } else {\n      el.setAttribute(name, String(value));\n    }\n  }\n}\n\n/**\n * Applies a property to a given Element.\n */\n// tslint:disable-next-line:no-any\nfunction applyProp(el: Element, name: string, value: any) {\n  // tslint:disable-next-line:no-any\n  (el as any)[name] = value;\n}\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n */\nfunction setStyleValue(\n    style: CSSStyleDeclaration, prop: string, value: string) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, value);\n  } else {\n    // TODO(tomnguyen) Figure out why this is necessary.\n    // tslint:disable-next-line:no-any\n    (style as any)[prop] = value;\n  }\n}\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param el\n * @param name The attribute's name.\n * @param  style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nfunction applyStyle(\n    el: HTMLElement, name: string, style: string|{[k: string]: string}) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n\n    for (const prop in style) {\n      if (has(style, prop)) {\n        setStyleValue(elStyle, prop, style[prop]);\n      }\n    }\n  }\n}\n\n\n/**\n * Updates a single attribute on an Element.\n * @param el\n * @param name The attribute's name.\n * @param value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nfunction applyAttributeTyped(el: HTMLElement, name: string, value: {}) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, value);\n  }\n}\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * NB: The result of createMap() has to be recast since closure compiler\n * will just assume attributes is \"any\" otherwise and throws away\n * the type annotation set by tsickle.\n */\nconst attributes: AttrMutatorConfig = (createMap() as AttrMutatorConfig);\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n */\nfunction updateAttribute(\n    el: HTMLElement, name: string, value: {}|null|undefined) {\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n}\n\n\n\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst DEBUG = true;\n\n/**\n * The name of the HTML attribute that holds the element key\n * (e.g. `<div key=\"foo\">`). The attribute value, if it exists, is then used\n * as the default key when importing an element.\n * If null, no attribute value is used as the default key.\n */\nlet keyAttributeName: string|null = 'key';\n\nfunction getKeyAttributeName() {\n  return keyAttributeName;\n}\n\nfunction setKeyAttributeName(name: string|null) {\n  keyAttributeName = name;\n}\n\nexport {\n  DEBUG,\n  getKeyAttributeName,\n  setKeyAttributeName,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {DEBUG} from './global';\nimport {NameOrCtorDef} from './types';\n\n\n/**\n * Keeps track whether or not we are in an attributes declaration (after\n * elementOpenStart, but before elementOpenEnd).\n */\nlet inAttributes = false;\n\n\n/**\n * Keeps track whether or not we are in an element that should not have its\n * children cleared.\n */\nlet inSkip = false;\n\n\n/**\n * Makes sure that there is a current patch context.\n */\nfunction assertInPatch(functionName: string, context: Document) {\n  if (!context) {\n    throw new Error('Cannot call ' + functionName + '() unless in patch.');\n  }\n}\n\n\n/**\n * Makes sure that a patch closes every node that it opened.\n * @param openElement\n * @param root\n */\nfunction assertNoUnclosedTags(\n    openElement: Node|null, root: Node|DocumentFragment) {\n  if (openElement === root) {\n    return;\n  }\n\n  let currentElement = openElement;\n  const openTags: string[] = [];\n  while (currentElement && currentElement !== root) {\n    openTags.push(currentElement.nodeName.toLowerCase());\n    currentElement = currentElement.parentNode;\n  }\n\n  throw new Error('One or more tags were not closed:\\n' + openTags.join('\\n'));\n}\n\n\n/**\n * Makes sure that node being outer patched has a parent node.\n */\nfunction assertPatchOuterHasParentNode(parent: Node|null) {\n  if (!parent) {\n    console.warn(\n      'patchOuter requires the node have a parent if there is a key.');\n  }\n}\n\n\n/**\n * Makes sure that the caller is not where attributes are expected.\n */\nfunction assertNotInAttributes(functionName: string) {\n  if (inAttributes) {\n    throw new Error(\n        functionName + '() can not be called between ' +\n        'elementOpenStart() and elementOpenEnd().');\n  }\n}\n\n\n/**\n * Makes sure that the caller is not inside an element that has declared skip.\n */\nfunction assertNotInSkip(functionName: string) {\n  if (inSkip) {\n    throw new Error(\n        functionName + '() may not be called inside an element ' +\n        'that has called skip().');\n  }\n}\n\n\n/**\n * Makes sure that the caller is where attributes are expected.\n */\nfunction assertInAttributes(functionName: string) {\n  if (!inAttributes) {\n    throw new Error(\n        functionName + '() can only be called after calling ' +\n        'elementOpenStart().');\n  }\n}\n\n\n/**\n * Makes sure the patch closes virtual attributes call\n */\nfunction assertVirtualAttributesClosed() {\n  if (inAttributes) {\n    throw new Error(\n        'elementOpenEnd() must be called after calling ' +\n        'elementOpenStart().');\n  }\n}\n\n\n/**\n * Makes sure that tags are correctly nested.\n */\nfunction assertCloseMatchesOpenTag(\n    currentNameOrCtor: NameOrCtorDef, nameOrCtor: NameOrCtorDef) {\n  if (currentNameOrCtor !== nameOrCtor) {\n    throw new Error(\n        'Received a call to close \"' + nameOrCtor + '\" but \"' +\n        currentNameOrCtor + '\" was open.');\n  }\n}\n\n\n/**\n * Makes sure that no children elements have been declared yet in the current\n * element.\n */\nfunction assertNoChildrenDeclaredYet(\n    functionName: string, previousNode: Node|null) {\n  if (previousNode !== null) {\n    throw new Error(\n        functionName + '() must come before any child ' +\n        'declarations inside the current element.');\n  }\n}\n\n\n/**\n * Checks that a call to patchOuter actually patched the element.\n * @param maybeStartNode The value for the currentNode when the patch\n *     started.\n * @param currentNode The currentNode when the patch finished.\n * @param expectedNextNode The Node that is expected to follow the\n *    currentNode after the patch;\n * @param  expectedPrevNode The Node that is expected to preceed the\n *    currentNode after the patch.\n */\nfunction assertPatchElementNoExtras(\n    maybeStartNode: Node|null, maybeCurrentNode: Node|null,\n    expectedNextNode: Node|null, expectedPrevNode: Node|null) {\n  assert(maybeStartNode);\n  const startNode = maybeStartNode!;\n  // tslint:disable-next-line:no-unnecessary-type-assertion\n  const currentNode = maybeCurrentNode!;\n  const wasUpdated = currentNode.nextSibling === expectedNextNode &&\n      currentNode.previousSibling === expectedPrevNode;\n  const wasChanged = currentNode.nextSibling === startNode.nextSibling &&\n      currentNode.previousSibling === expectedPrevNode;\n  const wasRemoved = currentNode === startNode;\n\n  if (!wasUpdated && !wasChanged && !wasRemoved) {\n    throw new Error(\n        'There must be exactly one top level call corresponding ' +\n        'to the patched element.');\n  }\n}\n\n\n/**\n * Updates the state of being in an attribute declaration.\n * @return the previous value.\n */\nfunction setInAttributes(value: boolean) {\n  const previous = inAttributes;\n  inAttributes = value;\n  return previous;\n}\n\n\n/**\n * Updates the state of being in a skip element.\n * @return the previous value.\n */\nfunction setInSkip(value: boolean) {\n  const previous = inSkip;\n  inSkip = value;\n  return previous;\n}\n\n/**\n * Asserts that a value exists and is not null or undefined. goog.asserts\n * is not used in order to avoid dependencies on external code.\n */\nfunction assert<T extends {}>(val: T|null|undefined): T {\n  if (DEBUG && !val) {\n    throw new Error('Expected value to be defined');\n  }\n  return val!;\n}\n\n\nexport {\n  assert,\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertNotInSkip,\n  assertPatchElementNoExtras,\n  assertPatchOuterHasParentNode,\n  setInAttributes,\n  setInSkip,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks if the node is the root of a document. This is either a Document\n * or ShadowRoot. DocumentFragments are included for simplicity of the\n * implementation, though we only want to consider Documents or ShadowRoots.\n * @param node The node to check.\n * @return True if the node the root of a document, false otherwise.\n */\nfunction isDocumentRoot(node: Node): node is Document|ShadowRoot {\n  return node.nodeType === 11 || node.nodeType === 9;\n}\n\n/**\n * Checks if the node is an Element. This is faster than an instanceof check.\n * @param node The node to check.\n * @return Whether or not the node is an Element.\n */\nfunction isElement(node: Node): node is Element {\n  return node.nodeType === 1;\n}\n\n\n/**\n * Checks if the node is a text node. This is faster than an instanceof check.\n * @param node The node to check.\n * @return Whether or not the node is a Text.\n */\nfunction isText(node: Node): node is Text {\n  return node.nodeType === 3;\n}\n\n/**\n * @param  node The node to start at, inclusive.\n * @param  root The root ancestor to get until, exclusive.\n * @return The ancestry of DOM nodes.\n */\nfunction getAncestry(node: Node, root: Node|null) {\n  const ancestry: Node[] = [];\n  let cur: Node|null = node;\n\n  while (cur !== root) {\n    const n: Node = cur!;\n    ancestry.push(n);\n    cur = n.parentNode;\n  }\n\n  return ancestry;\n}\n\n/**\n * return The root node of the DOM tree that contains this node.\n */\nconst getRootNode =\n    // tslint:disable-next-line:no-any b/79476176\n    (Node as any).prototype.getRootNode || function(this: Node) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion b/77361044\n      let cur: Node|null = this as Node;\n      let prev = cur;\n\n      while (cur) {\n        prev = cur;\n        cur = cur.parentNode;\n      }\n\n      return prev;\n    };\n\n\n/**\n * @param node The node to get the activeElement for.\n * @return The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nfunction getActiveElement(node: Node): Element|null {\n  const root = getRootNode.call(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n}\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param node The reference node to get the activeElement for.\n * @param root The root to get the focused path until.\n */\nfunction getFocusedPath(node: Node, root: Node|null): Node[] {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n}\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param parentNode\n * @param node\n * @param referenceNode\n */\nfunction moveBefore(parentNode: Node, node: Node, referenceNode: Node|null) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== null && cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n}\n\n\nexport {\n  isElement,\n  isText,\n  getFocusedPath,\n  moveBefore,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert} from './assertions';\nimport {isElement, isText} from './dom_util';\nimport {getKeyAttributeName} from './global';\nimport {Key, NameOrCtorDef} from './types';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n */\nexport class NodeData {\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   */\n  // tslint:disable-next-line:no-any\n  private _attrsArr: null|any[] = null;\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   */\n  staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   */\n  key: Key;\n\n  text: string|undefined;\n\n  /**\n   * The nodeName or contructor for the Node.\n   */\n  readonly nameOrCtor: NameOrCtorDef;\n\n  constructor(nameOrCtor: NameOrCtorDef, key: Key, text: string|undefined) {\n    this.nameOrCtor = nameOrCtor;\n    this.key = key;\n    this.text = text;\n  }\n\n  hasEmptyAttrsArr(): boolean {\n    const attrs = this._attrsArr;\n    return !attrs || !attrs.length;\n  }\n\n  getAttrsArr(length: number): any[] {\n    return this._attrsArr || (this._attrsArr = new Array(length));\n  }\n}\n\ndeclare global {\n  interface Node {\n    '__incrementalDOMData': NodeData|null;\n  }\n}\n\n/**\n * Initializes a NodeData object for a Node.\n */\nfunction initData(\n    node: Node, nameOrCtor: NameOrCtorDef, key: Key,\n    text?: string|undefined): NodeData {\n  const data = new NodeData(nameOrCtor, key, text);\n  node['__incrementalDOMData'] = data;\n  return data;\n}\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n */\nfunction getData(node: Node, key?: Key) {\n  return importSingleNode(node, key);\n}\n\nfunction isDataInitialized(node: Node): boolean {\n  return Boolean(node['__incrementalDOMData']);\n}\n\nfunction getKey(node: Node) {\n  assert(node['__incrementalDOMData']);\n  return getData(node).key;\n}\n\n/**\n * Imports single node and its subtree, initializing caches.\n */\nfunction importSingleNode(node: Node, fallbackKey?: Key) {\n  if (node['__incrementalDOMData']) {\n    return node['__incrementalDOMData']!;\n  }\n\n  const nodeName = isElement(node) ? node.localName : node.nodeName;\n  const keyAttrName = getKeyAttributeName();\n  const keyAttr = isElement(node) && keyAttrName != null ?\n      node.getAttribute(keyAttrName) :\n      null;\n  const key = isElement(node) ? keyAttr || fallbackKey : null;\n  const data = initData(node, nodeName!, key);\n\n  if (isElement(node)) {\n    recordAttributes(node, data);\n  }\n\n  return data;\n}\n\n/**\n * Imports node and its subtree, initializing caches.\n */\nfunction importNode(node: Node) {\n  importSingleNode(node);\n\n  for (let child: Node|null = node.firstChild; child;\n       child = child.nextSibling) {\n    importNode(child);\n  }\n}\n\n/**\n * Clears all caches from a node and all of its children.\n */\nfunction clearCache(node: Node) {\n  node['__incrementalDOMData'] = null;\n\n  for (let child: Node|null = node.firstChild; child;\n       child = child.nextSibling) {\n    clearCache(child);\n  }\n}\n\n/**\n * Records the element's attributes.\n * @param node The Element that may have attributes\n * @param data The Element's data\n */\nfunction recordAttributes(node: Element, data: NodeData) {\n  const attributes = node.attributes;\n  const length = attributes.length;\n  if (!length) {\n    return;\n  }\n\n  const attrsArr = data.getAttrsArr(length);\n\n  // Use a cached length. The attributes array is really a live NamedNodeMap,\n  // which exists as a DOM \"Host Object\" (probably as C++ code). This makes the\n  // usual constant length iteration very difficult to optimize in JITs.\n  for (let i = 0, j = 0; i < length; i += 1, j += 2) {\n    const attr = attributes[i];\n    const name = attr.name;\n    const value = attr.value;\n\n    attrsArr[j] = name;\n    attrsArr[j + 1] = value;\n  }\n}\n\n\n/** */\nexport {\n  getData,\n  getKey,\n  initData,\n  importNode,\n  isDataInitialized,\n  clearCache,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getData, initData} from './node_data';\nimport {Key, NameOrCtorDef} from './types';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n */\nfunction getNamespaceForTag(tag: string, parent: Node|null) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n  \n  if (tag === 'math') {\n    return 'http://www.w3.org/1998/Math/MathML';\n  }\n\n  if (parent == null) {\n    return null;\n  }\n\n  if (getData(parent).nameOrCtor === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n}\n\n\n/**\n * Creates an Element.\n * @param doc The document with which to create the Element.\n * @param nameOrCtor The tag or constructor for the Element.\n * @param key A key to identify the Element.\n * @param  typeId The type identifier for the Element.\n */\nfunction createElement(\n    doc: Document, parent: Node|null, nameOrCtor: NameOrCtorDef, key: Key)\n    : Element {\n  let el;\n\n  if (typeof nameOrCtor === 'function') {\n    el = new nameOrCtor();\n  } else {\n    const namespace = getNamespaceForTag(nameOrCtor, parent);\n\n    if (namespace) {\n      el = doc.createElementNS(namespace, nameOrCtor);\n    } else {\n      el = doc.createElement(nameOrCtor);\n    }\n  }\n\n  initData(el, nameOrCtor, key);\n\n  return el;\n}\n\n\n/**\n * Creates a Text Node.\n * @param doc The document with which to create the Element.\n * @return\n */\nfunction createText(doc: Document) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n}\n\n\n/** */\nexport {\n  createElement,\n  createText,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assertInPatch, assertNoChildrenDeclaredYet, assertNotInAttributes, assertNoUnclosedTags, assertPatchElementNoExtras, assertPatchOuterHasParentNode, assertVirtualAttributesClosed, setInAttributes, setInSkip} from './assertions';\nimport {Context} from './context';\nimport {getFocusedPath, moveBefore} from './dom_util';\nimport {DEBUG} from './global';\nimport {getData} from './node_data';\nimport {createElement, createText} from './nodes';\nimport {Key, MatchFnDef, NameOrCtorDef, PatchConfig, PatchFunction} from './types';\n\nlet context: Context|null = null;\n\nlet currentNode: Node|null = null;\n\nlet currentParent: Node|null = null;\n\nlet doc: Document|null = null;\n\nlet focusPath: Array<Node> = [];\n\nlet matchFn: MatchFnDef = defaultMatchFn;\n\n/**\n * Used to build up call arguments. Each patch call gets a separate copy, so\n * this works with nested calls to patch.\n */\nlet argsBuilder: Array<{}|null|undefined> = [];\n\n/**\n * TODO(sparhami) We should just export argsBuilder directly when Closure\n * Compiler supports ES6 directly.\n */\nfunction getArgsBuilder(): Array<{}|null|undefined>{\n  return argsBuilder;\n}\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n */\nfunction createPatcher<T, R>(\n    run: PatchFunction<T, R>,\n    patchConfig: PatchConfig = {},\n): PatchFunction<T, R> {\n  const {\n    matches = defaultMatchFn,\n  } = patchConfig;\n\n  const f: PatchFunction<T, R> = (node, fn, data) => {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevFocusPath = focusPath;\n    const prevArgsBuilder = argsBuilder;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    const prevMatchFn = matchFn;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    doc = node.ownerDocument;\n    context = new Context();\n    matchFn = matches;\n    argsBuilder = [];\n    currentNode = null;\n    currentParent = node.parentNode;\n    focusPath = getFocusedPath(node, currentParent);\n\n    if (DEBUG) {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    try {\n      const retVal = run(node, fn, data);\n      if (DEBUG) {\n        assertVirtualAttributesClosed();\n      }\n\n      return retVal;\n    } finally {\n      argsBuilder = prevArgsBuilder;\n      currentNode = prevCurrentNode;\n      currentParent = prevCurrentParent;\n      focusPath = prevFocusPath;\n      context.notifyChanges();\n\n      // Needs to be done after assertions because assertions rely on state\n      // from these methods.\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n      doc = prevDoc;\n      context = prevContext;\n      matchFn = prevMatchFn;\n    }\n  };\n  return f;\n}\n\n\n/**\n * Creates a patcher that patches the document starting at node with a\n * provided function. This function may be called during an existing patch operation.\n */\nfunction createPatchInner<T>(patchConfig?: PatchConfig):\n    PatchFunction<T, Node> {\n  return createPatcher((node, fn, data) => {\n    currentNode = node;\n\n    enterNode();\n    fn(data);\n    exitNode();\n\n    if (DEBUG) {\n      assertNoUnclosedTags(currentNode, node);\n    }\n\n    return node;\n  }, patchConfig);\n}\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n */\nfunction createPatchOuter<T>(patchConfig?: PatchConfig):\n    PatchFunction<T, Node|null> {\n  return createPatcher((node, fn, data) => {\n    // tslint:disable-next-line:no-any\n    const startNode = (({nextSibling: node}) as any) as Element;\n    let expectedNextNode: Node|null = null;\n    let expectedPrevNode: Node|null = null;\n\n    if (DEBUG) {\n      expectedNextNode = node.nextSibling;\n      expectedPrevNode = node.previousSibling;\n    }\n\n    currentNode = startNode;\n    fn(data);\n\n    if (DEBUG) {\n      assertPatchOuterHasParentNode(currentParent);\n      assertPatchElementNoExtras(\n          startNode, currentNode, expectedNextNode, expectedPrevNode);\n    }\n\n    if (currentParent) {\n      clearUnvisitedDOM(currentParent, getNextNode(), node.nextSibling);\n    }\n\n    return (startNode === currentNode) ? null : currentNode;\n  }, patchConfig);\n}\n\n\n/**\n * Checks whether or not the current node matches the specified nameOrCtor and\n * key. This uses the specified match function when creating the patcher.\n * @param matchNode A node to match the data to.\n * @param nameOrCtor The name or constructor to check for.\n * @param key The key used to identify the Node.\n * @return True if the node matches, false otherwise.\n */\nfunction matches(\n    matchNode: Node, nameOrCtor: NameOrCtorDef, key: Key): boolean {\n  const data = getData(matchNode, key);\n\n  return matchFn(matchNode, nameOrCtor, data.nameOrCtor, key, data.key);\n}\n\n\n/**\n * The default match function to use, if one was not specified when creating\n * the patcher.\n * @param matchNode The node to match against, unused.\n * @param nameOrCtor The name or constructor as declared.\n * @param expectedNameOrCtor The name or constructor of the existing node.\n * @param key The key as declared.\n * @param expectedKey The key of the existing node.\n */\nfunction defaultMatchFn(\n    matchNode: Node,\n    nameOrCtor: NameOrCtorDef,\n    expectedNameOrCtor: NameOrCtorDef,\n    key: Key,\n    expectedKey: Key,\n): boolean {\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  // tslint:disable-next-line:triple-equals\n  return nameOrCtor == expectedNameOrCtor && key == expectedKey;\n}\n\n\n/**\n * Finds the matching node, starting at `node` and looking at the subsequent\n * siblings if a key is used.\n * @param node The node to start looking at.\n * @param nameOrCtor The name or constructor for the Node.\n * @param key The key used to identify the Node.\n */\nfunction getMatchingNode(\n    matchNode: Node|null, nameOrCtor: NameOrCtorDef, key: Key): Node|null {\n  if (!matchNode) {\n    return null;\n  }\n\n  if (matches(matchNode, nameOrCtor, key)) {\n    return matchNode;\n  }\n\n  if (key) {\n    while ((matchNode = matchNode.nextSibling)) {\n      if (matches(matchNode, nameOrCtor, key)) {\n        return matchNode;\n      }\n    }\n  }\n\n  return null;\n}\n\n\n/**\n * Creates a Node and marking it as created.\n * @param nameOrCtor The name or constructor for the Node.\n * @param key The key used to identify the Node.\n * @return The newly created node.\n */\nfunction createNode(nameOrCtor: NameOrCtorDef, key:Key): Node {\n  let node;\n\n  if (nameOrCtor === '#text') {\n    node = createText(doc!);\n  } else {\n    node = createElement(doc!, currentParent!, nameOrCtor, key);\n  }\n\n  context!.markCreated(node);\n\n  return node;\n}\n\n\n/**\n * Aligns the virtual Node definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param nameOrCtor The name or constructor for the Node.\n * @param key The key used to identify the Node.\n */\nfunction alignWithDOM(nameOrCtor: NameOrCtorDef, key: Key) {\n  nextNode();\n  const existingNode = getMatchingNode(currentNode, nameOrCtor, key);\n  const node = existingNode || createNode(nameOrCtor, key);\n\n  // If we are at the matching node, then we are done.\n  if (node === currentNode) {\n    return;\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (focusPath.indexOf(node) >= 0) {\n    // Move everything else before the node.\n    moveBefore(currentParent!, node, currentNode);\n  } else {\n    currentParent!.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n}\n\n\n/**\n * Clears out any unvisited Nodes in a given range.\n * @param maybeParentNode\n * @param startNode The node to start clearing from, inclusive.\n * @param endNode The node to clear until, exclusive.\n */\nfunction clearUnvisitedDOM(\n    maybeParentNode: Node|null, startNode: Node|null, endNode: Node|null) {\n  const parentNode = maybeParentNode!;\n  let child = startNode;\n\n  while (child !== endNode) {\n    const next = child!.nextSibling;\n    parentNode.removeChild(child!);\n    context!.markDeleted(child!);\n    child = next;\n  }\n}\n\n\n/**\n * Changes to the first child of the current node.\n */\nfunction enterNode() {\n  currentParent = currentNode;\n  currentNode = null;\n}\n\n\n/**\n * @return The next Node to be patched.\n */\nfunction getNextNode(): Node|null {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent!.firstChild;\n  }\n}\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nfunction nextNode() {\n  currentNode = getNextNode();\n}\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nfunction exitNode() {\n  clearUnvisitedDOM(currentParent, getNextNode(), null);\n\n  currentNode = currentParent;\n  currentParent = currentParent!.parentNode;\n}\n\n\n/**\n * Makes sure that the current node is an Element with a matching nameOrCtor and\n * key.\n *\n * @param nameOrCtor The tag or constructor for the Element.\n * @param key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return The corresponding Element.\n */\nfunction open(nameOrCtor: NameOrCtorDef, key?: Key): HTMLElement {\n  alignWithDOM(nameOrCtor, key);\n  enterNode();\n  return (currentParent as HTMLElement);\n}\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n */\nfunction close() {\n  if (DEBUG) {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return (currentNode) as Element;\n}\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n */\nfunction text(): Text {\n  alignWithDOM('#text', null);\n  return (currentNode) as Text;\n}\n\n\n/**\n * Gets the current Element being patched.\n */\nfunction currentElement(): HTMLElement {\n  if (DEBUG) {\n    assertInPatch('currentElement', doc!);\n    assertNotInAttributes('currentElement');\n  }\n  return (currentParent) as HTMLElement;\n}\n\n\n/**\n * @return The Node that will be evaluated for the next instruction.\n */\nfunction currentPointer(): Node {\n  if (DEBUG) {\n    assertInPatch('currentPointer', doc!);\n    assertNotInAttributes('currentPointer');\n  }\n  // TODO(tomnguyen): assert that this is not null\n  return getNextNode()!;\n}\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nfunction skip() {\n  if (DEBUG) {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent!.lastChild;\n}\n\n\nconst patchInner = createPatchInner();\nconst patchOuter = createPatchOuter();\n\n/** */\nexport {\n  alignWithDOM,\n  getArgsBuilder,\n  text,\n  createPatchInner,\n  createPatchOuter,\n  patchInner,\n  patchOuter,\n  open,\n  close,\n  currentElement,\n  currentPointer,\n  skip,\n  nextNode as skipNode,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {assert, assertCloseMatchesOpenTag, assertInAttributes, assertNotInAttributes, assertNotInSkip, setInAttributes} from './assertions';\nimport {updateAttribute} from './attributes';\nimport {getArgsBuilder, close, open, text as coreText} from './core';\nimport {DEBUG} from './global';\nimport {getData, NodeData} from './node_data';\nimport {Key, NameOrCtorDef, Statics} from './types';\nimport {createMap, truncateArray} from './util';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Used to keep track of the previous values when a 2-way diff is necessary.\n * This object is reused.\n * TODO(sparhamI) Scope this to a patch so you can call patch from an attribute\n * update.\n */\nconst prevAttrsMap = createMap();\n\n\n/**\n * Applies the statics. When importing an Element, any existing attributes that\n * match a static are converted into a static attribute.\n * @param node The Element to apply statics for.\n * @param data The Element's data\n * @param statics The statics array,\n */\nfunction applyStatics(node: HTMLElement, data: NodeData, statics: Statics) {\n  data.staticsApplied = true;\n\n  if (!statics || !statics.length) {\n    return;\n  }\n\n  if (data.hasEmptyAttrsArr()) {\n    for (let i = 0; i < statics.length; i += 2) {\n      updateAttribute(node, statics[i] as string, statics[i + 1]);\n    }\n    return;\n  }\n\n  for (let i = 0; i < statics.length; i += 2) {\n    prevAttrsMap[statics[i] as string] = i + 1;\n  }\n\n  const attrsArr = data.getAttrsArr(0);\n  let j = 0;\n  for (let i = 0; i < attrsArr.length; i += 2) {\n    const name = attrsArr[i];\n    const value = attrsArr[i + 1];\n    const staticsIndex = prevAttrsMap[name];\n\n    if (staticsIndex) {\n      // For any attrs that are static and have the same value, make sure we do\n      // not set them again.\n      if (statics[staticsIndex] === value) {\n        delete prevAttrsMap[name];\n      }\n\n      continue;\n    }\n\n    // For any attrs that are dynamic, move them up to the right place.\n    attrsArr[j] = name;\n    attrsArr[j + 1] = value;\n    j += 2;\n  }\n  // Anything after `j` was either moved up already or static.\n  truncateArray(attrsArr, j);\n\n  for (const name in prevAttrsMap) {\n    updateAttribute(node, name, statics[prevAttrsMap[name]]);\n    delete prevAttrsMap[name];\n  }\n}\n\n\n/**\n * @param  nameOrCtor The Element's tag or constructor.\n * @param  key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param statics An array of attribute name/value pairs of the static\n *     attributes for the Element. Attributes will only be set once when the\n *     Element is created.\n * @param varArgs, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return The corresponding Element.\n */\nfunction elementOpen(\n    nameOrCtor: NameOrCtorDef, key?: Key,\n    // Ideally we could tag statics and varArgs as an array where every odd\n    // element is a string and every even element is any, but this is hard.\n    // tslint:disable-next-line:no-any\n    statics?: Statics, ...varArgs: any[]) {\n  if (DEBUG) {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = open(nameOrCtor, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    applyStatics(node, data, statics);\n  }\n\n  const attrsLength = Math.max(0, arguments.length - ATTRIBUTES_OFFSET);\n  const hadNoAttrs = data.hasEmptyAttrsArr();\n\n  if (!attrsLength && hadNoAttrs) {\n    return node;\n  }\n\n  const attrsArr = data.getAttrsArr(attrsLength);\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const name = arguments[i];\n    if (hadNoAttrs) {\n      attrsArr[j] = name;\n    } else if (attrsArr[j] !== name) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (hadNoAttrs || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, name, value);\n    }\n  }\n\n  /*\n   * Items did not line up exactly as before, need to make sure old items are\n   * removed. This can happen if using conditional logic when declaring\n   * attrs through the elementOpenStart flow or if one element is reused in\n   * the place of another.\n   */\n  if (i < arguments.length || j < attrsArr.length) {\n    const attrsStart = j;\n\n    for (; j < attrsArr.length; j += 2) {\n      prevAttrsMap[attrsArr[j]] = attrsArr[j + 1];\n    }\n\n    for (j = attrsStart; i < arguments.length; i += 2, j += 2) {\n      const name = arguments[i];\n      const value = arguments[i + 1];\n\n      if (prevAttrsMap[name] !== value) {\n        updateAttribute(node, name, value);\n      }\n\n      attrsArr[j] = name;\n      attrsArr[j + 1] = value;\n\n      delete prevAttrsMap[name];\n    }\n\n    truncateArray(attrsArr, j);\n\n    /*\n     * At this point, only have attributes that were present before, but have\n     * been removed.\n     */\n    for (const name in prevAttrsMap) {\n      updateAttribute(node, name, undefined);\n      delete prevAttrsMap[name];\n    }\n  }\n\n  return node;\n}\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param nameOrCtor The Element's tag or constructor.\n * @param key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param statics An array of attribute name/value pairs of the static\n *     attributes for the Element. Attributes will only be set once when the\n *     Element is created.\n */\nfunction elementOpenStart(\n  nameOrCtor: NameOrCtorDef, key?: Key, statics?: Statics) {\n  const argsBuilder = getArgsBuilder();\n\n  if (DEBUG) {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = nameOrCtor;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n}\n\n\n/**\n * Allows you to define a key after an elementOpenStart. This is useful in\n * templates that define key after an element has been opened ie\n * `<div key('foo')></div>`.\n */\nfunction key(key:string) {\n  const argsBuilder = getArgsBuilder();\n\n  if (DEBUG) {\n    assertInAttributes('key');\n    assert(argsBuilder);\n  }\n  argsBuilder[1] = key;\n}\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n */\n// tslint:disable-next-line:no-any\nfunction attr(name: string, value: any) {\n  const argsBuilder = getArgsBuilder();\n\n  if (DEBUG) {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n}\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return The corresponding Element.\n */\nfunction elementOpenEnd(): HTMLElement {\n  const argsBuilder = getArgsBuilder();\n\n  if (DEBUG) {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  assert(argsBuilder);\n  const node = elementOpen.apply(null, argsBuilder!);\n  truncateArray(argsBuilder, 0);\n  return node;\n}\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param nameOrCtor The Element's tag or constructor.\n * @return The corresponding Element.\n */\nfunction elementClose(nameOrCtor: NameOrCtorDef): Element {\n  if (DEBUG) {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = close();\n\n  if (DEBUG) {\n    assertCloseMatchesOpenTag(getData(node).nameOrCtor, nameOrCtor);\n  }\n\n  return node;\n}\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param nameOrCtor The Element's tag or constructor.\n * @param key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param statics An array of attribute name/value pairs of the static\n *     attributes for the Element. Attributes will only be set once when the\n *     Element is created.\n * @param varArgs Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return The corresponding Element.\n */\nfunction elementVoid(\n    nameOrCtor: NameOrCtorDef, key?: Key,\n    // Ideally we could tag statics and varArgs as an array where every odd\n    // element is a string and every even element is any, but this is hard.\n    // tslint:disable-next-line:no-any\n    statics?: Statics, ...varArgs: any[]) {\n  elementOpen.apply(null, arguments);\n  return elementClose(nameOrCtor);\n}\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param value The value of the Text.\n * @param varArgs\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return The corresponding text node.\n */\nfunction text(value: string|number|boolean, ...varArgs: Array<(a: {}) => string>) {\n  if (DEBUG) {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = (value) as string;\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    // Setting node.data resets the cursor in IE/Edge.\n    if (node.data !== formatted) {\n      node.data = formatted as string;\n    }\n  }\n\n  return node;\n}\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr,\n  key,\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst symbols = {\n  default: '__default'\n};\n\nexport {symbols,};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport type NodeFunction = (n: Node[]) => void;\n\nexport interface Notifications {\n  /**\n   * Called after patch has completed with any Nodes that have been created\n   * and added to the DOM.\n   */\n  nodesCreated: NodeFunction|null;\n  /**\n   * Called after patch has completed with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an application's responsibility to handle any childNodes.\n   */\n  nodesDeleted: NodeFunction|null;\n}\n\nexport const notifications: Notifications = {\n  nodesCreated: null,\n  nodesDeleted: null\n};\n","/**\n * @license\n * Copyright 2018 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {notifications} from './notifications';\n\n\n/**\n * A context object keeps track of the state of a patch.\n */\nclass Context {\n  private created: Node[] = [];\n  private deleted: Node[] = [];\n\n  markCreated(node: Node) {\n    this.created.push(node);\n  }\n\n  markDeleted(node: Node) {\n    this.deleted.push(node);\n  }\n\n\n  /**\n   * Notifies about nodes that were created during the patch operation.\n   */\n  notifyChanges() {\n    if (notifications.nodesCreated && this.created.length > 0) {\n      notifications.nodesCreated(this.created);\n    }\n\n    if (notifications.nodesDeleted && this.deleted.length > 0) {\n      notifications.nodesDeleted(this.deleted);\n    }\n  }\n}\n\n\nexport {\n  Context,\n};\n"],"names":["map","property","hasOwnProperty","call","Blank","arr","length","pop","name","lastIndexOf","el","value","removeAttribute","attrNS","getNamespace","setAttributeNS","String","setAttribute","style","prop","indexOf","setProperty","cssText","elStyle","has","type","mutator","attributes","symbols","default","keyAttributeName","previous","inAttributes","inSkip","val","node","nodeType","root","ancestry","cur","n","push","parentNode","getRootNode","isDocumentRoot","activeElement","getActiveElement","contains","getAncestry","referenceNode","insertReferenceNode","nextSibling","next","insertBefore","nameOrCtor","key","text","data","NodeData","importSingleNode","Boolean","getData","fallbackKey","nodeName","isElement","localName","keyAttrName","getKeyAttributeName","keyAttr","getAttribute","initData","child","firstChild","attrsArr","getAttrsArr","i","j","attr","tag","parent","namespaceURI","doc","namespace","getNamespaceForTag","createElementNS","createElement","createTextNode","argsBuilder","run","patchConfig","_a","matches","f","fn","prevContext","context","prevDoc","prevFocusPath","focusPath","prevArgsBuilder","prevCurrentNode","currentNode","prevCurrentParent","currentParent","prevMatchFn","matchFn","previousInAttributes","previousInSkip","ownerDocument","Context","getFocusedPath","retVal","notifyChanges","createPatcher","startNode","getNextNode","matchNode","expectedNameOrCtor","expectedKey","createText","markCreated","existingNode","getMatchingNode","createNode","maybeParentNode","endNode","removeChild","markDeleted","lastChild","statics","staticsApplied","hasEmptyAttrsArr","staticsIndex","prevAttrsMap","_i","open","attrsLength","Math","max","arguments","ATTRIBUTES_OFFSET","hadNoAttrs","attrsStart","undefined","getArgsBuilder","elementOpen","apply","close","elementClose","coreText","formatted","Object","prototype","create","createMap","applyAttributeTyped","applyStyle","notifications","created","deleted","nodesCreated","this","nodesDeleted","Node","prev","attrs","_attrsArr","Array","defaultMatchFn","patchInner","createPatchInner","patchOuter","createPatchOuter"],"mappings":"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","sourceRoot":"/source/"}